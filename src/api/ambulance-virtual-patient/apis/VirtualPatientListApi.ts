/* tslint:disable */
/* eslint-disable */
/**
 * Virtual Patient List Api
 * Virtual Patient List management for Web-In-Cloud system
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: your_email@stuba.sk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  VirtualPatient,
} from '../models';
import {
    VirtualPatientFromJSON,
    VirtualPatientToJSON,
} from '../models';

export interface CreateVirtualPatientRequest {
    virtualPatient: VirtualPatient;
}

export interface DeleteVirtualPatientRequest {
    virtualPatientId: string;
}

export interface UpdateVirtualPatientRequest {
    virtualPatientId: string;
    virtualPatient: VirtualPatient;
}

/**
 * VirtualPatientListApi - interface
 * 
 * @export
 * @interface VirtualPatientListApiInterface
 */
export interface VirtualPatientListApiInterface {
    /**
     * Creates a new virtual patient record
     * @summary Creates a new virtual patient
     * @param {VirtualPatient} virtualPatient 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualPatientListApiInterface
     */
    createVirtualPatientRaw(requestParameters: CreateVirtualPatientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VirtualPatient>>;

    /**
     * Creates a new virtual patient record
     * Creates a new virtual patient
     */
    createVirtualPatient(requestParameters: CreateVirtualPatientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VirtualPatient>;

    /**
     * Deletes an existing virtual patient record
     * @summary Deletes a virtual patient
     * @param {string} virtualPatientId ID of the virtual patient to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualPatientListApiInterface
     */
    deleteVirtualPatientRaw(requestParameters: DeleteVirtualPatientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes an existing virtual patient record
     * Deletes a virtual patient
     */
    deleteVirtualPatient(requestParameters: DeleteVirtualPatientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Provides the list of all virtual patients
     * @summary Provides the virtual patient list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualPatientListApiInterface
     */
    getVirtualPatientListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<VirtualPatient>>>;

    /**
     * Provides the list of all virtual patients
     * Provides the virtual patient list
     */
    getVirtualPatientList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<VirtualPatient>>;

    /**
     * Updates an existing virtual patient record
     * @summary Updates a virtual patient
     * @param {string} virtualPatientId ID of the virtual patient to update
     * @param {VirtualPatient} virtualPatient 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualPatientListApiInterface
     */
    updateVirtualPatientRaw(requestParameters: UpdateVirtualPatientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VirtualPatient>>;

    /**
     * Updates an existing virtual patient record
     * Updates a virtual patient
     */
    updateVirtualPatient(requestParameters: UpdateVirtualPatientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VirtualPatient>;

}

/**
 * 
 */
export class VirtualPatientListApi extends runtime.BaseAPI implements VirtualPatientListApiInterface {

    /**
     * Creates a new virtual patient record
     * Creates a new virtual patient
     */
    async createVirtualPatientRaw(requestParameters: CreateVirtualPatientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VirtualPatient>> {
        if (requestParameters.virtualPatient === null || requestParameters.virtualPatient === undefined) {
            throw new runtime.RequiredError('virtualPatient','Required parameter requestParameters.virtualPatient was null or undefined when calling createVirtualPatient.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/virtual-patient-list/entries`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VirtualPatientToJSON(requestParameters.virtualPatient),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VirtualPatientFromJSON(jsonValue));
    }

    /**
     * Creates a new virtual patient record
     * Creates a new virtual patient
     */
    async createVirtualPatient(requestParameters: CreateVirtualPatientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VirtualPatient> {
        const response = await this.createVirtualPatientRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes an existing virtual patient record
     * Deletes a virtual patient
     */
    async deleteVirtualPatientRaw(requestParameters: DeleteVirtualPatientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.virtualPatientId === null || requestParameters.virtualPatientId === undefined) {
            throw new runtime.RequiredError('virtualPatientId','Required parameter requestParameters.virtualPatientId was null or undefined when calling deleteVirtualPatient.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/virtual-patient-list/entries/{virtualPatientId}`.replace(`{${"virtualPatientId"}}`, encodeURIComponent(String(requestParameters.virtualPatientId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes an existing virtual patient record
     * Deletes a virtual patient
     */
    async deleteVirtualPatient(requestParameters: DeleteVirtualPatientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteVirtualPatientRaw(requestParameters, initOverrides);
    }

    /**
     * Provides the list of all virtual patients
     * Provides the virtual patient list
     */
    async getVirtualPatientListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<VirtualPatient>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/virtual-patient-list/entries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VirtualPatientFromJSON));
    }

    /**
     * Provides the list of all virtual patients
     * Provides the virtual patient list
     */
    async getVirtualPatientList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<VirtualPatient>> {
        const response = await this.getVirtualPatientListRaw(initOverrides);
        return await response.value();
    }

    /**
     * Updates an existing virtual patient record
     * Updates a virtual patient
     */
    async updateVirtualPatientRaw(requestParameters: UpdateVirtualPatientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VirtualPatient>> {
        if (requestParameters.virtualPatientId === null || requestParameters.virtualPatientId === undefined) {
            throw new runtime.RequiredError('virtualPatientId','Required parameter requestParameters.virtualPatientId was null or undefined when calling updateVirtualPatient.');
        }

        if (requestParameters.virtualPatient === null || requestParameters.virtualPatient === undefined) {
            throw new runtime.RequiredError('virtualPatient','Required parameter requestParameters.virtualPatient was null or undefined when calling updateVirtualPatient.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/virtual-patient-list/entries/{virtualPatientId}`.replace(`{${"virtualPatientId"}}`, encodeURIComponent(String(requestParameters.virtualPatientId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: VirtualPatientToJSON(requestParameters.virtualPatient),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VirtualPatientFromJSON(jsonValue));
    }

    /**
     * Updates an existing virtual patient record
     * Updates a virtual patient
     */
    async updateVirtualPatient(requestParameters: UpdateVirtualPatientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VirtualPatient> {
        const response = await this.updateVirtualPatientRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
