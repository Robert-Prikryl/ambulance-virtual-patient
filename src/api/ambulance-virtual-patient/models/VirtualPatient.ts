/* tslint:disable */
/* eslint-disable */
/**
 * Virtual Patient List Api
 * Virtual Patient List management for Web-In-Cloud system
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: your_email@stuba.sk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface VirtualPatient
 */
export interface VirtualPatient {
    /**
     * Unique identifier of the virtual patient
     * @type {string}
     * @memberof VirtualPatient
     */
    id: string;
    /**
     * Name of the virtual patient
     * @type {string}
     * @memberof VirtualPatient
     */
    name: string;
    /**
     * MongoDB record identifier
     * @type {string}
     * @memberof VirtualPatient
     */
    recordId: string;
    /**
     * Difficulty of the virtual patient. 1 is the easiest, 5 is the hardest.
     * @type {number}
     * @memberof VirtualPatient
     */
    difficulty: number;
    /**
     * List of symptoms the virtual patient is experiencing
     * @type {Array<string>}
     * @memberof VirtualPatient
     */
    symptoms: Array<string>;
    /**
     * Medical history and current condition description
     * @type {string}
     * @memberof VirtualPatient
     */
    anamnesis: string;
}

/**
 * Check if a given object implements the VirtualPatient interface.
 */
export function instanceOfVirtualPatient(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "recordId" in value;
    isInstance = isInstance && "difficulty" in value;
    isInstance = isInstance && "symptoms" in value;
    isInstance = isInstance && "anamnesis" in value;

    return isInstance;
}

export function VirtualPatientFromJSON(json: any): VirtualPatient {
    return VirtualPatientFromJSONTyped(json, false);
}

export function VirtualPatientFromJSONTyped(json: any, ignoreDiscriminator: boolean): VirtualPatient {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'recordId': json['recordId'],
        'difficulty': json['difficulty'],
        'symptoms': json['symptoms'],
        'anamnesis': json['anamnesis'],
    };
}

export function VirtualPatientToJSON(value?: VirtualPatient | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'recordId': value.recordId,
        'difficulty': value.difficulty,
        'symptoms': value.symptoms,
        'anamnesis': value.anamnesis,
    };
}

