/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { VirtualPatient } from "./api/ambulance-virtual-patient";
export { VirtualPatient } from "./api/ambulance-virtual-patient";
export namespace Components {
    interface XprikrylVpCreate {
        "apiBase": string;
    }
    interface XprikrylVpDetail {
        "apiBase": string;
        "patientId": string;
        "userRole": string;
    }
    interface XprikrylVpDetailEditor {
        "apiBase": string;
        "patientId": string;
        "userRole": string;
    }
    interface XprikrylVpList {
        "apiBase": string;
        "userRole": string;
    }
    interface XprikrylVpLogin {
        "apiBase": string;
    }
    interface XprikrylVpManager {
        "apiBase": string;
        "basePath": string;
    }
}
export interface XprikrylVpCreateCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLXprikrylVpCreateElement;
}
export interface XprikrylVpDetailEditorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLXprikrylVpDetailEditorElement;
}
export interface XprikrylVpListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLXprikrylVpListElement;
}
export interface XprikrylVpLoginCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLXprikrylVpLoginElement;
}
declare global {
    interface HTMLXprikrylVpCreateElementEventMap {
        "patient-created": VirtualPatient;
    }
    interface HTMLXprikrylVpCreateElement extends Components.XprikrylVpCreate, HTMLStencilElement {
        addEventListener<K extends keyof HTMLXprikrylVpCreateElementEventMap>(type: K, listener: (this: HTMLXprikrylVpCreateElement, ev: XprikrylVpCreateCustomEvent<HTMLXprikrylVpCreateElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLXprikrylVpCreateElementEventMap>(type: K, listener: (this: HTMLXprikrylVpCreateElement, ev: XprikrylVpCreateCustomEvent<HTMLXprikrylVpCreateElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLXprikrylVpCreateElement: {
        prototype: HTMLXprikrylVpCreateElement;
        new (): HTMLXprikrylVpCreateElement;
    };
    interface HTMLXprikrylVpDetailElement extends Components.XprikrylVpDetail, HTMLStencilElement {
    }
    var HTMLXprikrylVpDetailElement: {
        prototype: HTMLXprikrylVpDetailElement;
        new (): HTMLXprikrylVpDetailElement;
    };
    interface HTMLXprikrylVpDetailEditorElementEventMap {
        "patient-updated": any;
        "patient-deleted": void;
    }
    interface HTMLXprikrylVpDetailEditorElement extends Components.XprikrylVpDetailEditor, HTMLStencilElement {
        addEventListener<K extends keyof HTMLXprikrylVpDetailEditorElementEventMap>(type: K, listener: (this: HTMLXprikrylVpDetailEditorElement, ev: XprikrylVpDetailEditorCustomEvent<HTMLXprikrylVpDetailEditorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLXprikrylVpDetailEditorElementEventMap>(type: K, listener: (this: HTMLXprikrylVpDetailEditorElement, ev: XprikrylVpDetailEditorCustomEvent<HTMLXprikrylVpDetailEditorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLXprikrylVpDetailEditorElement: {
        prototype: HTMLXprikrylVpDetailEditorElement;
        new (): HTMLXprikrylVpDetailEditorElement;
    };
    interface HTMLXprikrylVpListElementEventMap {
        "entry-clicked": string;
    }
    interface HTMLXprikrylVpListElement extends Components.XprikrylVpList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLXprikrylVpListElementEventMap>(type: K, listener: (this: HTMLXprikrylVpListElement, ev: XprikrylVpListCustomEvent<HTMLXprikrylVpListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLXprikrylVpListElementEventMap>(type: K, listener: (this: HTMLXprikrylVpListElement, ev: XprikrylVpListCustomEvent<HTMLXprikrylVpListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLXprikrylVpListElement: {
        prototype: HTMLXprikrylVpListElement;
        new (): HTMLXprikrylVpListElement;
    };
    interface HTMLXprikrylVpLoginElementEventMap {
        "roleSelected": string;
    }
    interface HTMLXprikrylVpLoginElement extends Components.XprikrylVpLogin, HTMLStencilElement {
        addEventListener<K extends keyof HTMLXprikrylVpLoginElementEventMap>(type: K, listener: (this: HTMLXprikrylVpLoginElement, ev: XprikrylVpLoginCustomEvent<HTMLXprikrylVpLoginElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLXprikrylVpLoginElementEventMap>(type: K, listener: (this: HTMLXprikrylVpLoginElement, ev: XprikrylVpLoginCustomEvent<HTMLXprikrylVpLoginElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLXprikrylVpLoginElement: {
        prototype: HTMLXprikrylVpLoginElement;
        new (): HTMLXprikrylVpLoginElement;
    };
    interface HTMLXprikrylVpManagerElement extends Components.XprikrylVpManager, HTMLStencilElement {
    }
    var HTMLXprikrylVpManagerElement: {
        prototype: HTMLXprikrylVpManagerElement;
        new (): HTMLXprikrylVpManagerElement;
    };
    interface HTMLElementTagNameMap {
        "xprikryl-vp-create": HTMLXprikrylVpCreateElement;
        "xprikryl-vp-detail": HTMLXprikrylVpDetailElement;
        "xprikryl-vp-detail-editor": HTMLXprikrylVpDetailEditorElement;
        "xprikryl-vp-list": HTMLXprikrylVpListElement;
        "xprikryl-vp-login": HTMLXprikrylVpLoginElement;
        "xprikryl-vp-manager": HTMLXprikrylVpManagerElement;
    }
}
declare namespace LocalJSX {
    interface XprikrylVpCreate {
        "apiBase"?: string;
        "onPatient-created"?: (event: XprikrylVpCreateCustomEvent<VirtualPatient>) => void;
    }
    interface XprikrylVpDetail {
        "apiBase"?: string;
        "patientId"?: string;
        "userRole"?: string;
    }
    interface XprikrylVpDetailEditor {
        "apiBase"?: string;
        "onPatient-deleted"?: (event: XprikrylVpDetailEditorCustomEvent<void>) => void;
        "onPatient-updated"?: (event: XprikrylVpDetailEditorCustomEvent<any>) => void;
        "patientId"?: string;
        "userRole"?: string;
    }
    interface XprikrylVpList {
        "apiBase"?: string;
        "onEntry-clicked"?: (event: XprikrylVpListCustomEvent<string>) => void;
        "userRole"?: string;
    }
    interface XprikrylVpLogin {
        "apiBase"?: string;
        "onRoleSelected"?: (event: XprikrylVpLoginCustomEvent<string>) => void;
    }
    interface XprikrylVpManager {
        "apiBase"?: string;
        "basePath"?: string;
    }
    interface IntrinsicElements {
        "xprikryl-vp-create": XprikrylVpCreate;
        "xprikryl-vp-detail": XprikrylVpDetail;
        "xprikryl-vp-detail-editor": XprikrylVpDetailEditor;
        "xprikryl-vp-list": XprikrylVpList;
        "xprikryl-vp-login": XprikrylVpLogin;
        "xprikryl-vp-manager": XprikrylVpManager;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "xprikryl-vp-create": LocalJSX.XprikrylVpCreate & JSXBase.HTMLAttributes<HTMLXprikrylVpCreateElement>;
            "xprikryl-vp-detail": LocalJSX.XprikrylVpDetail & JSXBase.HTMLAttributes<HTMLXprikrylVpDetailElement>;
            "xprikryl-vp-detail-editor": LocalJSX.XprikrylVpDetailEditor & JSXBase.HTMLAttributes<HTMLXprikrylVpDetailEditorElement>;
            "xprikryl-vp-list": LocalJSX.XprikrylVpList & JSXBase.HTMLAttributes<HTMLXprikrylVpListElement>;
            "xprikryl-vp-login": LocalJSX.XprikrylVpLogin & JSXBase.HTMLAttributes<HTMLXprikrylVpLoginElement>;
            "xprikryl-vp-manager": LocalJSX.XprikrylVpManager & JSXBase.HTMLAttributes<HTMLXprikrylVpManagerElement>;
        }
    }
}
